<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 5.0.0 (0)
 -->
<!-- Title: hydra::detail::random::is_matching_iterable&lt; Engine, Functor, Iterable &gt; Pages: 1 -->
<svg width="241pt" height="358pt"
 viewBox="0.00 0.00 241.00 358.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 354)">
<title>hydra::detail::random::is_matching_iterable&lt; Engine, Functor, Iterable &gt;</title>
<!-- Node0 -->
<g id="node1" class="node">
<title>Node0</title>
<polygon fill="#bfbfbf" stroke="black" points="46,-0.5 46,-79.5 187,-79.5 187,-0.5 46,-0.5"/>
<text text-anchor="start" x="54" y="-67.5" font-family="Helvetica,sans-Serif" font-size="10.00">hydra::detail::random</text>
<text text-anchor="start" x="54" y="-56.5" font-family="Helvetica,sans-Serif" font-size="10.00">::is_matching_iterable</text>
<text text-anchor="middle" x="116.5" y="-45.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; Engine, Functor, Iterable &gt;</text>
<polyline fill="none" stroke="black" points="46,-38.5 187,-38.5 "/>
<text text-anchor="middle" x="116.5" y="-26.5" font-family="Helvetica,sans-Serif" font-size="10.00"> </text>
<polyline fill="none" stroke="black" points="46,-19.5 187,-19.5 "/>
<text text-anchor="middle" x="116.5" y="-7.5" font-family="Helvetica,sans-Serif" font-size="10.00"> </text>
</g>
<!-- Node1 -->
<g id="node2" class="node">
<title>Node1</title>
<polygon fill="none" stroke="#bfbfbf" points="0,-116.5 0,-349.5 233,-349.5 233,-116.5 0,-116.5"/>
<text text-anchor="start" x="8" y="-337.5" font-family="Helvetica,sans-Serif" font-size="10.00">std::conditional::type</text>
<text text-anchor="start" x="8" y="-326.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; hydra::detail::is_iterable</text>
<text text-anchor="start" x="8" y="-315.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; Iterable &gt;::value &amp;&amp;!hydra</text>
<text text-anchor="start" x="8" y="-304.5" font-family="Helvetica,sans-Serif" font-size="10.00">::detail::is_iterator&lt; Iterable</text>
<text text-anchor="start" x="8" y="-293.5" font-family="Helvetica,sans-Serif" font-size="10.00"> &gt;::value &amp;&amp;(hydra::detail::is</text>
<text text-anchor="start" x="8" y="-282.5" font-family="Helvetica,sans-Serif" font-size="10.00">_hydra_composite_functor&lt; Functor</text>
<text text-anchor="start" x="8" y="-271.5" font-family="Helvetica,sans-Serif" font-size="10.00"> &gt;::value||hydra::detail::is_hydra</text>
<text text-anchor="start" x="8" y="-260.5" font-family="Helvetica,sans-Serif" font-size="10.00">_functor&lt; Functor &gt;::value||hydra::</text>
<text text-anchor="start" x="8" y="-249.5" font-family="Helvetica,sans-Serif" font-size="10.00">detail::is_hydra_lambda&lt; Functor &gt;::</text>
<text text-anchor="start" x="8" y="-238.5" font-family="Helvetica,sans-Serif" font-size="10.00">value) &amp;&amp;hydra::detail::has_rng_formula</text>
<text text-anchor="start" x="8" y="-227.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; Functor &gt;::value &amp;&amp;std::is_convertible</text>
<text text-anchor="start" x="8" y="-216.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; decltype(std::declval&lt; RngFormula&lt; Functor</text>
<text text-anchor="start" x="8" y="-205.5" font-family="Helvetica,sans-Serif" font-size="10.00"> &gt;&gt;().Generate(std::declval&lt; Engine &amp;&gt;(), std</text>
<text text-anchor="start" x="8" y="-194.5" font-family="Helvetica,sans-Serif" font-size="10.00">::declval&lt; Functor const &amp;&gt;())), hydra::thrust</text>
<text text-anchor="start" x="8" y="-183.5" font-family="Helvetica,sans-Serif" font-size="10.00">::iterator_traits&lt; decltype(std::declval&lt; Iterable</text>
<text text-anchor="start" x="8" y="-172.5" font-family="Helvetica,sans-Serif" font-size="10.00"> &gt;().begin())&gt;::value_type &gt;::value, std::true_type,</text>
<text text-anchor="middle" x="116.5" y="-161.5" font-family="Helvetica,sans-Serif" font-size="10.00"> std::false_type &gt;</text>
<polyline fill="none" stroke="#bfbfbf" points="0,-154.5 233,-154.5 "/>
<text text-anchor="middle" x="116.5" y="-142.5" font-family="Helvetica,sans-Serif" font-size="10.00"> </text>
<polyline fill="none" stroke="#bfbfbf" points="0,-135.5 233,-135.5 "/>
<text text-anchor="middle" x="116.5" y="-123.5" font-family="Helvetica,sans-Serif" font-size="10.00"> </text>
</g>
<!-- Node1&#45;&gt;Node0 -->
<g id="edge1" class="edge">
<title>Node1&#45;&gt;Node0</title>
<path fill="none" stroke="midnightblue" d="M116.5,-106.4C116.5,-96.87 116.5,-87.77 116.5,-79.57"/>
<polygon fill="none" stroke="midnightblue" points="113,-106.49 116.5,-116.49 120,-106.49 113,-106.49"/>
</g>
</g>
</svg>
