<map id="hydra::detail::is_iterator&lt; T, hydra::thrust::void_t&lt; typename std::enable_if&lt; std::is_default_constructible&lt; T &gt;::value, void &gt;::type, typename std::enable_if&lt; std::is_copy_constructible&lt; T &gt;::value, void &gt;::type, typename std::enable_if&lt; std::is_destructible&lt; T &gt;::value, void &gt;::type, decltype(std::declval&lt; T &amp; &gt;()[0]), decltype(std::declval&lt; T &amp; &gt;() &#45;std::declval&lt; T &amp; &gt;()), decltype(++std::declval&lt; T &amp; &gt;()), decltype(*std::declval&lt; T &amp; &gt;()), decltype(std::declval&lt; T &amp; &gt;()==std::declval&lt; T &amp; &gt;()), decltype(std::declval&lt; T &amp; &gt;() !=std::declval&lt; T &amp; &gt;())&gt; &gt;" name="hydra::detail::is_iterator&lt; T, hydra::thrust::void_t&lt; typename std::enable_if&lt; std::is_default_constructible&lt; T &gt;::value, void &gt;::type, typename std::enable_if&lt; std::is_copy_constructible&lt; T &gt;::value, void &gt;::type, typename std::enable_if&lt; std::is_destructible&lt; T &gt;::value, void &gt;::type, decltype(std::declval&lt; T &amp; &gt;()[0]), decltype(std::declval&lt; T &amp; &gt;() &#45;std::declval&lt; T &amp; &gt;()), decltype(++std::declval&lt; T &amp; &gt;()), decltype(*std::declval&lt; T &amp; &gt;()), decltype(std::declval&lt; T &amp; &gt;()==std::declval&lt; T &amp; &gt;()), decltype(std::declval&lt; T &amp; &gt;() !=std::declval&lt; T &amp; &gt;())&gt; &gt;">
</map>
