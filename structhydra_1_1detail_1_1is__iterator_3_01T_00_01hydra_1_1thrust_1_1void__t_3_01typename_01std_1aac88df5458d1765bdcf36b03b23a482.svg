<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 5.0.0 (0)
 -->
<!-- Title: hydra::detail::is_iterator&lt; T, hydra::thrust::void_t&lt; typename std::enable_if&lt; std::is_default_constructible&lt; T &gt;::value, void &gt;::type, typename std::enable_if&lt; std::is_copy_constructible&lt; T &gt;::value, void &gt;::type, typename std::enable_if&lt; std::is_destructible&lt; T &gt;::value, void &gt;::type, decltype(std::declval&lt; T &amp; &gt;()[0]), decltype(std::declval&lt; T &amp; &gt;() &#45;std::declval&lt; T &amp; &gt;()), decltype(++std::declval&lt; T &amp; &gt;()), decltype(*std::declval&lt; T &amp; &gt;()), decltype(std::declval&lt; T &amp; &gt;()==std::declval&lt; T &amp; &gt;()), decltype(std::declval&lt; T &amp; &gt;() !=std::declval&lt; T &amp; &gt;())&gt; &gt; Pages: 1 -->
<svg width="265pt" height="303pt"
 viewBox="0.00 0.00 265.00 303.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 299)">
<title>hydra::detail::is_iterator&lt; T, hydra::thrust::void_t&lt; typename std::enable_if&lt; std::is_default_constructible&lt; T &gt;::value, void &gt;::type, typename std::enable_if&lt; std::is_copy_constructible&lt; T &gt;::value, void &gt;::type, typename std::enable_if&lt; std::is_destructible&lt; T &gt;::value, void &gt;::type, decltype(std::declval&lt; T &amp; &gt;()[0]), decltype(std::declval&lt; T &amp; &gt;() &#45;std::declval&lt; T &amp; &gt;()), decltype(++std::declval&lt; T &amp; &gt;()), decltype(*std::declval&lt; T &amp; &gt;()), decltype(std::declval&lt; T &amp; &gt;()==std::declval&lt; T &amp; &gt;()), decltype(std::declval&lt; T &amp; &gt;() !=std::declval&lt; T &amp; &gt;())&gt; &gt;</title>
<!-- Node2 -->
<g id="node1" class="node">
<title>Node2</title>
<polygon fill="#bfbfbf" stroke="black" points="0,-0.5 0,-200.5 257,-200.5 257,-0.5 0,-0.5"/>
<text text-anchor="start" x="8" y="-188.5" font-family="Helvetica,sans-Serif" font-size="10.00">hydra::detail::is_iterator</text>
<text text-anchor="start" x="8" y="-177.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; T, hydra::thrust::void</text>
<text text-anchor="start" x="8" y="-166.5" font-family="Helvetica,sans-Serif" font-size="10.00">_t&lt; typename std::enable</text>
<text text-anchor="start" x="8" y="-155.5" font-family="Helvetica,sans-Serif" font-size="10.00">_if&lt; std::is_default_constructible</text>
<text text-anchor="start" x="8" y="-144.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; T &gt;::value, void &gt;::type, typename</text>
<text text-anchor="start" x="8" y="-133.5" font-family="Helvetica,sans-Serif" font-size="10.00"> std::enable_if&lt; std::is_copy_constructible</text>
<text text-anchor="start" x="8" y="-122.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; T &gt;::value, void &gt;::type, typename std</text>
<text text-anchor="start" x="8" y="-111.5" font-family="Helvetica,sans-Serif" font-size="10.00">::enable_if&lt; std::is_destructible&lt; T &gt;::value,</text>
<text text-anchor="start" x="8" y="-100.5" font-family="Helvetica,sans-Serif" font-size="10.00"> void &gt;::type, decltype(std::declval&lt; T &amp; &gt;</text>
<text text-anchor="start" x="8" y="-89.5" font-family="Helvetica,sans-Serif" font-size="10.00">()[0]), decltype(std::declval&lt; T &amp; &gt;() &#45;std::</text>
<text text-anchor="start" x="8" y="-78.5" font-family="Helvetica,sans-Serif" font-size="10.00">declval&lt; T &amp; &gt;()), decltype(++std::declval&lt; T</text>
<text text-anchor="start" x="8" y="-67.5" font-family="Helvetica,sans-Serif" font-size="10.00"> &amp; &gt;()), decltype(*std::declval&lt; T &amp; &gt;()), decltype</text>
<text text-anchor="start" x="8" y="-56.5" font-family="Helvetica,sans-Serif" font-size="10.00">(std::declval&lt; T &amp; &gt;()==std::declval&lt; T &amp; &gt;()), decltype</text>
<text text-anchor="middle" x="128.5" y="-45.5" font-family="Helvetica,sans-Serif" font-size="10.00">(std::declval&lt; T &amp; &gt;() !=std::declval&lt; T &amp; &gt;())&gt; &gt;</text>
<polyline fill="none" stroke="black" points="0,-38.5 257,-38.5 "/>
<text text-anchor="middle" x="128.5" y="-26.5" font-family="Helvetica,sans-Serif" font-size="10.00"> </text>
<polyline fill="none" stroke="black" points="0,-19.5 257,-19.5 "/>
<text text-anchor="middle" x="128.5" y="-7.5" font-family="Helvetica,sans-Serif" font-size="10.00"> </text>
</g>
<!-- Node3 -->
<g id="node2" class="node">
<title>Node3</title>
<polygon fill="none" stroke="#bfbfbf" points="100,-237.5 100,-294.5 157,-294.5 157,-237.5 100,-237.5"/>
<text text-anchor="middle" x="128.5" y="-282.5" font-family="Helvetica,sans-Serif" font-size="10.00">true_type</text>
<polyline fill="none" stroke="#bfbfbf" points="100,-275.5 157,-275.5 "/>
<text text-anchor="middle" x="128.5" y="-263.5" font-family="Helvetica,sans-Serif" font-size="10.00"> </text>
<polyline fill="none" stroke="#bfbfbf" points="100,-256.5 157,-256.5 "/>
<text text-anchor="middle" x="128.5" y="-244.5" font-family="Helvetica,sans-Serif" font-size="10.00"> </text>
</g>
<!-- Node3&#45;&gt;Node2 -->
<g id="edge1" class="edge">
<title>Node3&#45;&gt;Node2</title>
<path fill="none" stroke="midnightblue" d="M128.5,-227.04C128.5,-218.87 128.5,-209.87 128.5,-200.55"/>
<polygon fill="none" stroke="midnightblue" points="125,-227.26 128.5,-237.26 132,-227.26 125,-227.26"/>
</g>
</g>
</svg>
